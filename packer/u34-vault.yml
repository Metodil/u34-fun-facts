# u34-vault.yml
- name: 'Provision HS Vault Instal'
  hosts: default
  gather_facts: false
  become: true

  vars:
    vault_addr: "http://127.0.0.1:8200"
    vault_version: "1.18.2"
    vault_checksum: "sha256:a448c8b6839d76ec54fa320d3a558ff0e5ef0c3d27ea78c88ace333461d7264b"
    vault_install_prerequisites: ['unzip' , 'awscli' , 'curl' , 'jq' , 'libcap2-bin' , 'certbot', 'mc']
    vault_user: "vault"
    vault_group: "vault"
    vault_config_path: "/etc/vault.hcl"
    vault_storage_path: "/opt/vault/data"
    vault_tls_path: "/opt/vault/tls"
    vault_log_file: "/var/log/vault.log"

  tasks:
    - name: Creating vault user group
      group:
        name: "{{ vault_group }}"
      become: true
    - name: Creating vault user
      user:
        name: "{{ vault_user }}"
        group: "{{ vault_group }}"
        system: yes
        shell: "/sbin/nologin"
        comment: "vault nologin User"
        createhome: "no"
        state: present

    - name: Install prerequisites
      package:
        name: "{{ item }}"
        update_cache: yes
      with_items: "{{ vault_install_prerequisites }}"
      become: true

    - name: Download binary
      get_url:
        url: https://releases.hashicorp.com/vault/{{vault_version}}/vault_{{vault_version}}_linux_amd64.zip
        dest: /tmp/vault_{{vault_version}}_linux_amd64.zip
        owner: "{{ vault_user }}"
        group: "{{ vault_group }}"
        mode: 0755
        checksum: "{{vault_checksum}}"
      register: vault_download

    - name: Unzip vault archive
      unarchive:
        src: "{{ vault_download.dest }}"
        dest: /usr/local/bin
        copy: no
        owner: "{{ vault_user }}"
        group: "{{ vault_group }}"
        mode: 0755

    - name: Create storage
      become: true
      ansible.builtin.file:
        name: "{{ vault_storage_path }}"
        owner: vault
        group: vault
        mode: "0755"
        state: directory

    - name: Create tls folder
      become: true
      ansible.builtin.file:
        name: "{{ vault_tls_path }}"
        owner: vault
        group: vault
        mode: "0755"
        state: directory

    - name: Create log file
      become: true
      ansible.builtin.file:
        path: "{{ vault_log_file }}"
        owner: vault
        group: vault
        mode: "0755"
        state: touch

    - name: Check if install was successful
      command: vault --version
      register: vault_ver
      failed_when: "'command not found' in vault_ver.stderr"

    - name: Copy systemd init file
      template:
        src: init.service.j2
        dest: /etc/systemd/system/vault.service
        owner: root
        group: root

    - name: Copy config file
      template:
        src: vault.hcl.j2
        dest: "{{ vault_config_path }}"
        owner: "{{ vault_user }}"
        group: "{{ vault_group }}"

    - name: Vault service start
      service:
        name: vault.service
        state: started
        enabled: yes

#    - name: Pause for 10 seconds
#      pause:
#        seconds: 10

#    - name: Vault init
#      register: r_vault_init
#      environment:
#        VAULT_ADDR: "http://127.0.0.1:8200"
#      ansible.builtin.command:
#        cmd: vault operator init -format json
##       -address="http://127.0.0.1:8200" -key-shares=5 -key-threshold=3
#
#    - name: Vault init data
#      ansible.builtin.set_fact:
#        vault_init_data: "{{ r_vault_init.stdout | from_json }}"
#
#    - name: Save vault data
#      become: true
#      ansible.builtin.copy:
#        content: "{{ vault_init_data | to_nice_json(indent=2) }}"
#        dest: "{{ vault_storage_path }}/init_data.json"
#
#    - name: Vault unseal
#      loop: "{{ vault_init_data.unseal_keys_b64[:3] }}"
#      environment:
#        VAULT_ADDR: "http://127.0.0.1:8200"
#      ansible.builtin.command:
#        cmd: "vault operator unseal '{{ item }}'"
#
#    - name: Vault unseal
#      loop: "{{ vault_init_data.unseal_keys_b64[:3] }}"
#      ansible.builtin.debug:
#        msg: "vault operator unseal '{{ item }}'"
#
#    - name: Vault status
#      register: r_vault_status
#      environment:
#        VAULT_ADDR: "http://127.0.0.1:8200"
#      ansible.builtin.command:
#        cmd: "vault status -format json"
#
#    - name: Vault status report
#      ansible.builtin.debug:
#        msg: "{{ r_vault_status.stdout | from_json }}"

#    - name: Break for testing
#      ansible.builtin.fail:
#        msg: Break for check status
#      when: true == true
