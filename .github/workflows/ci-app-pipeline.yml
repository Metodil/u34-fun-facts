name: u34 ci-app-pipeline
run-name: u34 ci-app-pipeline run on ${{ github.event_name }} event
on:
#  schedule:
#    - cron: '0 0 * * 1,4' # on Monday (1) and Thursday (4)
  push:
    paths:
      - 'ci-app-pipeline.yml'
#  pull_request:
#    types: [opened, reopened]
#    branches:
#        - 'main'
#    paths:
#      - 'app/**'
#      - 'Dockerfile'
#      - 'requirements.txt'

env:
  IMAGE_TAG: metodil/u34-fun-facts

jobs:

  editorconfig-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: editorconfig-checker/action-editorconfig-checker@main
      - run: editorconfig-checker

  markdown-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: gaurav-nelson/github-action-markdown-link-check@v1

  lint-black-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: psf/black@stable
        with:
          options: "--check --verbose"
          src: "."

  lint-unit-tests:
    runs-on: ubuntu-latest
    needs: [ editorconfig-check, markdown-check, lint-black-check ]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.8'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/client/code/requirements.txt
          pip install pytest pytest-cov flake8 pylint
      - name: Run flake8 linting
        run: flake8 app/client/code
      - name: Analysing the code with pylint
        run: |
          pylint --rcfile=.pylintrc $(git ls-files '*.py')
      - name: Unit test with pytest
        run: |
          cd app/client/code
          python -m unittest app_test.py


#  gitleaks-security:
#    runs-on: ubuntu-latest
#    needs: lint-unit-tests
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#      - uses: gitleaks/gitleaks-action@v2
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#  trivy-security:
#    runs-on: ubuntu-latest
#    needs: lint-unit-tests
#    steps:
#      - uses: actions/checkout@v4
#      - name: Run Trivy vulnerability scanner in repo mode
#        uses: aquasecurity/trivy-action@0.20.0
#        with:
#          scan-type: 'fs'
#          ignore-unfixed: true
#          format: 'sarif'
#          output: 'trivy-results.sarif'
#          severity: 'CRITICAL'
#      - name: Upload Trivy scan results to GitHub Security tab
#        uses: github/codeql-action/upload-sarif@v3
#        with:
#          sarif_file: 'trivy-results.sarif'
##  it is link in my github account
##  snyk-security:
##    runs-on: ubuntu-latest
###    needs: lint-unit-tests
##    steps:
##      - uses: actions/checkout@v4 #actions/checkout@master
##      - name: Run Snyk to check for vulnerabilities
##        uses: snyk/actions/node@master
##        continue-on-error: true # To make sure that SARIF upload gets called
##        env:
##          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
##        with:
##          args: --sarif-file-output=snyk.sarif
##      - name: Upload result to GitHub Code Scanning
##        uses: github/codeql-action/upload-sarif@v2
##        with:
##          sarif_file: snyk.sarif
#  sonarcloud-security:
#    runs-on: ubuntu-latest
##    needs: lint-unit-tests
#    steps:
#    - uses: actions/checkout@v4
#      with:
#        # Disabling shallow clone is recommended for improving relevancy of reporting
#        fetch-depth: 0
#    - name: SonarCloud Scan
#      uses: sonarsource/sonarcloud-github-action@v3.1.0 # Ex: v2.1.0, See the latest version at https://github.com/marketplace/actions/sonarcloud-scan
#      env:
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#  build-test-images:
#    name: Build images and test them
#    runs-on: ubuntu-latest
#    needs: [ gitleaks-security,  trivy-security, sonarcloud-security ]
#    strategy:
#      matrix:
#        include:
#          - name: "web"
#            folder: "client"
#          - name: "gen"
#            folder: "generator"
#          - name: "db"
#            folder: "storage"
#    #    if: ${{ !cancelled() && !failure() }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#      - name: Build an image from Dockerfile and runing image for test
#        run: |
#          docker build -t ${{ matrix.name }}:${{ github.sha }} -f app/${{ matrix.folder }}/Dockerfile.${{ matrix.name }} app/
#          mkdir -p /tmp/artifacts
#          docker save ${{ matrix.name }}:${{ github.sha }} > /tmp/artifacts/docker-${{ matrix.name }}-image.tar
#      - name: Check image can be runing for test
#        run: |
#          docker run -d --rm ${{ matrix.name }}:${{ github.sha }}
##      - name: Run Trivy vulnerability scanner
##        uses: aquasecurity/trivy-action@0.29.0
##        with:
##          image-ref: '${{ matrix.name }}:${{ github.sha }}'
##          format: 'sarif'
##          output: 'trivy-results-web-container.sarif'
##      - name: Upload Trivy scan results to GitHub Security tab
##        uses: github/codeql-action/upload-sarif@v3
##        with:
##          sarif_file: 'trivy-results-web-container.sarif'
#      - name: Upload artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: image-${{ matrix.name }}
#          retention-days: 0 # 1 days to keep artifact
#          path: /tmp/artifacts/docker-${{ matrix.name }}-image.tar


#  deploy:
#    name: Get credentials and push to Dockerhub
##    description: Get credentials from Hashi vault and push docker image to Dockerhub
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        include:
#          - name: "web"
#            tag: "web"
#          - name: "gen"
#            tag: "generator"
#          - name: "db"
#            tag: "storage"

#    if: ${{ !cancelled() && !failure() }}
#    needs: [ build-test-images ]
#    steps:
##      - name: Import Secrets from Hashi vault
##        id: import-secrets
##        uses: hashicorp/vault-action@v3
##        with:
##          url: https://vault.elcomp68.com:8200
##          token: ${{ secrets.HV_U34_TOKEN }}
##          caCertificate: ${{ secrets.VAULT_CA_CERT }}
##          secrets: |
##                kv/data/u34-ci dockerhub_username | DOCKERHUB_USERNAME ;
##                kv/data/u34-ci dockerhub_token | DOCKERHUB_TOKEN ;
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
##          username: ${{ env.DOCKERHUB_USERNAME }}
##          password: ${{ env.DOCKERHUB_TOKEN }}
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}

#      - name: Load image from artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: image-${{ matrix.name }}
#          path: /tmp
#      - name: Load image to Docker
#        run: |
#          docker load -i /tmp/docker-${{ matrix.name }}-image.tar
#          docker tag ${{ matrix.name }}:${{ github.sha }} ${{ env.IMAGE_TAG }}-${{ matrix.tag }}:${{ github.sha }}
#          docker push ${{ env.IMAGE_TAG }}-${{ matrix.tag }}:${{ github.sha }}
