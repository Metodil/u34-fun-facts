name: CICD-TF-common
run-name: u34 CICD-Terraform-common run on ${{ github.event_name }} event
on:
    push:
        paths:
          - '.github/workflows/tf-common.yml'
          - 'terraform/aws_common/**'
    schedule:
      - cron: '0 0 * * 1,4' # on Monday (1) and Thursday (4)
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
  AWS_REGION: "eu-central-1"
  TF_ROOT: "terraform/aws_common"
  GITHUB_NAME: "metodil/u34-fun-facts"
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_TF_INFRA_AWS }}
#  name: INFRACOST_SLACK_MESSAGE
#  command: 'echo "/tmp/$BASE_REPO_OWNER-$BASE_REPO_NAME-$PULL_NUM-$WORKSPACE-${REPO_REL_DIR//\//-}-slack-message.json"'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Start notification CICD-TF-common
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"CICD-TF-common: started "}' $SLACK_WEBHOOK_URL
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.1

      - name: Terraform Init
        id: init
        run: |
          cd ${{ env.TF_ROOT }}
          terraform init

      - name: Format Terraform Code
        run: |
          cd ${{ env.TF_ROOT }}
          terraform fmt -check -diff || exit 0

      - name: Terraform Validate
        id: validate
        run: |
          cd ${{ env.TF_ROOT }}
          terraform validate
      - name: Checks notification
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"CICD-TF-common: checks is finished "}' $SLACK_WEBHOOK_URL

#      - name: Install Checkov with pip
#        run: pip install checkov
#
#      - name: Checkov Scan
#        id: checkov
#        run: |
#          cd ${{ env.TF_ROOT }}
#          checkov -d . || exit 0

      - name: Security notification
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"CICD-TF-common: Security with Checkov is finished "}' $SLACK_WEBHOOK_URL

      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      # Generate Infracost JSON file as the baseline.
      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=${TF_ROOT} \
                              --format=json \
                              --out-file=/tmp/infracost-common.json

      - name: Post Infracost comment
        run: |
            infracost comment github --path=/tmp/infracost-common.json \
                                     --repo=${{ env.GITHUB_NAME }} \
                                     --github-token=${{ secrets.U34_FP_GITHUB_TOKEN }} \
                                     --behavior=hide-and-new \
                                     --commit=${{ github.sha }}
#                                     --pr=${{ github.event.pull_request.number }}

      - name: Post Infracost comment
        run: |
          infracost comment github --path=/tmp/infracost-common-slack.json \
                                   --format slack-message \
                                   --out-file /tmp/infracost-common-slack-mess.json

      - name: cURL to send a Slack message via a webhook
        run: |
          # Skip posting to Slack if there's no cost change
          cost_change=$(cat $INFRACOST_OUTPUT | jq -r "(.diffTotalMonthlyCost // 0) | tonumber")
          if [ "$cost_change" = "0" ]; then
            echo "Not posting to Slack since cost change is zero"
            exit 0
          fi
          curl -X POST -H "Content-type: application/json" -d @/tmp/infracost-common-slack-mess.json ${{ secrets.SLACK_WEBHOOK_URL_CICD_APP }}


      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ env.TF_ROOT }}
          terraform plan -out=tfplan-common

      - name: Terraform Plan notification
        run: |
          curl -X POST -H 'Content-type: application/json' --data @tfplan-common $SLACK_WEBHOOK_URL

      - name: Copy tfplan to the S3 Bucket
        run: |
          cd ${{ env.TF_ROOT }}
          aws s3 cp tfplan-common s3://u34-tfstate/tfplan-common

      - name: Finish notification
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"CICD-TF-common: Copy tfplan to the S3 Bucket and finished "}' $SLACK_WEBHOOK_URL
